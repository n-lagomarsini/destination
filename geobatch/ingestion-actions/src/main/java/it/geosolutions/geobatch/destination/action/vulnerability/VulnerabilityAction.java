/*
 *  GeoBatch - Open Source geospatial batch processing system
 *  http://geobatch.geo-solutions.it/
 *  Copyright (C) 2013 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.action.vulnerability;

import it.geosolutions.geobatch.actions.ds2ds.dao.FeatureConfiguration;
import it.geosolutions.geobatch.annotations.Action;
import it.geosolutions.geobatch.destination.action.DestinationBaseAction;
import it.geosolutions.geobatch.destination.ingestion.MetadataIngestionHandler;
import it.geosolutions.geobatch.destination.vulnerability.TargetManager.TargetInfo;
import it.geosolutions.geobatch.destination.vulnerability.VulnerabilityComputation;
import it.geosolutions.geobatch.destination.vulnerability.VulnerabilityEnvironment;
import it.geosolutions.geobatch.destination.vulnerability.VulnerabilityUtils;
import it.geosolutions.geobatch.flow.event.action.ActionException;

import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.TreeMap;

import javax.media.jai.PlanarImage;

import org.geotools.filter.function.RangedClassifier;
import org.geotools.jdbc.JDBCDataStore;
import org.geotools.resources.image.ImageUtilities;

@Action(configurationClass = VulnerabilityConfiguration.class)
public class VulnerabilityAction extends DestinationBaseAction<VulnerabilityConfiguration> {

    private static final int DEFAULT_THREAD_MAX_NUMBER = 4;

    private static final int DEFAULT_NUM_BLOCK = 2;

    public VulnerabilityAction(final VulnerabilityConfiguration configuration) throws IOException {
        super(configuration);
    }

    @Override
    protected void doProcess(VulnerabilityConfiguration cfg, FeatureConfiguration featureCfg,
            JDBCDataStore dataStore, MetadataIngestionHandler metadataHandler, File file)
            throws ActionException {

        try {
            // Vulnerability Object used for the initial calculations
            VulnerabilityComputation vulnerability = new VulnerabilityComputation(
                    featureCfg.getTypeName(), listenerForwarder, metadataHandler, dataStore);

            // Initial operations on the input Rasters
            //
            // 1. Merging of the rasters into 2 images, human and notHuman
            //
            // 2. Saving of the indexes that link each image band to the related target

            Map<Integer, TargetInfo> bandPerTargetH = new TreeMap<Integer, TargetInfo>();
            Map<Integer, TargetInfo> bandPerTargetNH = new TreeMap<Integer, TargetInfo>();

            RenderedImage[] images = vulnerability.rasterCalculation(bandPerTargetH,
                    bandPerTargetNH);

            // Aggregation level 1 or 2
            if (cfg.getAggregationLevel() != 3) {
                // Selection of the X and Y block number used for creating Nx*Ny parallel threads each one calculates
                // vulnerability on its block
                int numXBlocks = cfg.getNumXblocks() > 0 ? cfg.getNumXblocks() : cfg
                        .getNumYblocks() > 0 ? cfg.getNumYblocks() : DEFAULT_NUM_BLOCK;
                int numYBlocks = cfg.getNumYblocks() > 0 ? cfg.getNumYblocks() : cfg
                        .getNumXblocks() > 0 ? cfg.getNumXblocks() : DEFAULT_NUM_BLOCK;

                // Operation called from the Vulnerability Environment object
                new VulnerabilityEnvironment(listenerForwarder).computeLevel12(cfg.getClosePhase(),
                        numXBlocks, numYBlocks, featureCfg.getTypeName(), dataStore,
                        metadataHandler, images, bandPerTargetNH, bandPerTargetH,
                        cfg.getWriteMode(), cfg.getAggregationLevel(), cfg.isSkipArcs(),
                        cfg.getxStart(), cfg.getyStart(), cfg.getxStop(), cfg.getyStop(),cfg.getIdStart(),cfg.getBbox());
                // Aggregation level 3
            } else {
                // Selection of the thread number, used for dividing the input cells into N group, each one for one thread
                int threadMaxNumber = cfg.getThreadMaxNumber() != null ? cfg.getThreadMaxNumber()
                        : DEFAULT_THREAD_MAX_NUMBER;
                // Group division of the input cells
                RangedClassifier groups = VulnerabilityUtils.computeIntervals(vulnerability,
                        threadMaxNumber, cfg.getCellStart(), cfg.isSkipArcs());
                // Operation called from the Vulnerability Environment object
                new VulnerabilityEnvironment(listenerForwarder).computeLevel3(cfg.getClosePhase(),
                        threadMaxNumber, groups, featureCfg.getTypeName(), dataStore,
                        metadataHandler, images, bandPerTargetNH, bandPerTargetH,
                        cfg.getWriteMode(), cfg.isSkipArcs(),cfg.getBbox());
            }

            // Image Disposal
            ImageUtilities.disposePlanarImageChain(PlanarImage.wrapRenderedImage(images[0]));
            // Image Disposal
            ImageUtilities.disposePlanarImageChain(PlanarImage.wrapRenderedImage(images[1]));
        } catch (Exception ex) {
            // TODO: what shall we do here??
            // log and rethrow for the moment, but a rollback should be implementened somewhere
            LOGGER.error("Error in computing vulnerability", ex);
            throw new ActionException(this, "Error in computing vulnerability", ex);
        }finally{
            // DataStore disposal
            dataStore.dispose();
        }
    }
}
